package org.itmo;

import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;

class Graph {
    private final int V;
    private final ArrayList<Integer>[] adjList;

    Graph(int vertices) {
        this.V = vertices;
        adjList = new ArrayList[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }
    }

    void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    void parallelDFS(int startNode, int countThreads) {
        AtomicIntegerArray visited = new AtomicIntegerArray(V);
        ArrayBlockingQueue<Integer> unvisitedQueue = new ArrayBlockingQueue<>(V);

        AtomicInteger countInWorkNodes = new AtomicInteger(1);

        unvisitedQueue.add(startNode);
        visited.set(startNode, 1);

        Runnable task = () -> {
            while (countInWorkNodes.get() != 0) {
                Integer currentNode;
                try {
                    currentNode = unvisitedQueue.poll(1, TimeUnit.MILLISECONDS);
                } catch (InterruptedException e) {
                    continue;
                }
                if (currentNode == null) {
                    continue;
                }

                List<Integer> neighbors = adjList[currentNode];
                for (int neighbor : neighbors) {
                    if (visited.compareAndSet(neighbor, 0, 1)) {
                        countInWorkNodes.incrementAndGet();
                        unvisitedQueue.add(neighbor);
                    }
                }
                countInWorkNodes.decrementAndGet();
            }
        };

        Thread[] threads = new Thread[countThreads - 1];
        for (int i = 0; i < threads.length; ++i) {
            threads[i] = new Thread(task);
        }

        for (Thread thread : threads) {
            thread.start();
        }

        task.run();

        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }


    //Generated by ChatGPT
    void dfs(int startVertex) {
        boolean[] visited = new boolean[V];

        LinkedList<Integer> queue = new LinkedList<Integer>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }
}
